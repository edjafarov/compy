#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander')
  , component = require('..')
  , utils = component.utils;

// usage

program.usage('<name>');

// parse argv

program.parse(process.argv);

// package

var pkg = program.args.shift();

// required

if (!pkg) utils.fatal("<name> required");

// lookup docs

component.changes(pkg, function(err, docs){
  // TODO: handle non-markdown
  if (err) throw err;
  if (!docs) utils.fatal('failed to lookup changelog for "' + pkg + '"');
  var readme = new Buffer(docs.content, 'base64').toString('utf8');
  process.stdout.write(indent(markdown(readme)));
  process.stdout.write('\n\n');
});

/**
 * Convert `str` of markdown for terminal display.
 */

function markdown(str) {
  // TODO: move this stuff to npm
  return str
    .replace(/^([^\n]+)\n\s*===+/gm, '\033[1m$1\033[0m')
    .replace(/^#+ *(.+)/gm, '\033[1m$1\033[0m')
    .replace(/`{3}\w*((?:.|\n)+?)`{3}/g, code)
    .replace(/`(.*?)`/g, '\033[36m$1\033[0m')
    .replace(/__(.*?)__/g, '\033[1m$1\033[0m')
    .replace(/!?\[(.*?)\]\((.*?)\)/g, '$1:(\033[36;4m$2\033[m)');
}

/**
 * Code formatting.
 */

function code(_, code) {
  code = indent(code.trim());
  return '\033[90m' + code + '\033[0m';
}

/**
 * Indent the given `str`.
 */

function indent(str) {
  return str.replace(/^/gm, '  ');
}