#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander');
var Builder = require('component-builder');
var component = require('..');
var utils = component.utils;
var log = component.utils.log;
var path = require('path');
var fs = require('fs');
var exists = fs.existsSync || path.existsSync;
var mkdir = require('mkdirp');

// options

program
  .option('-d, --dev', 'build development dependencies')
  .option('-s, --standalone <name>', 'build a stand-alone version of the component')
  .option('-o, --out <dir>', 'output directory defaulting to ./build', 'build')
  .option('-n, --name <file>', 'base name for build files defaulting to build', 'build')
  .option('-p, --prefix <str>', 'prefix css asset urls with <str>')
  .option('-c, --copy', 'copy files instead of linking')
  .option('-u, --use <name>', 'use the given build plugin(s)')
  .option('-R, --no-require', 'exclude require from build')
  .option('-v, --verbose', 'verbose output')

// examples

program.on('--help', function(){
  console.log('  Examples:');
  console.log();
  console.log('    # build to ./build');
  console.log('    $ component build');
  console.log();
  console.log('    # build to ./dist as assets.js, assets.css');
  console.log('    $ component build -o dist -n assets');
  console.log();
  console.log('    # build standalone as window.$');
  console.log('    $ component build --standalone $');
  console.log();
  console.log('    # build with plugins');
  console.log('    $ component build -u foo,bar,baz');
  console.log();
});

// parse argv

program.parse(process.argv);

// component.json required

if (!exists('component.json')) utils.fatal('missing component.json');

// load json

var conf = require(path.resolve('component.json'));

// standalone

var standalone = program.standalone;

// output paths

var jsPath = path.join(program.out, program.name + '.js');
var cssPath = path.join(program.out, program.name + '.css');

// mkdir -p

mkdir.sync(program.out);

// build

var builder = new Builder(process.cwd());
if (program.copy) builder.copyFiles();
builder.copyAssetsTo(program.out);
if (program.dev) builder.prefixUrls('./');
if (program.prefix) builder.prefixUrls(program.prefix);

// require middleware plugins
if (program.use) {
  var modules = program.use.split(',');
  modules.forEach(function(mod){
    var resolved = path.resolve(mod)
      , real = exists(resolved) || exists(resolved + '.js')
      , module = path.resolve('node_modules', mod);

    builder.use(real ? require(resolved) : require(module));
  });
}

var start = new Date;

// --dev

if (program.dev) {
  builder.development();
  builder.addSourceURLs();
}

// build

if (program.verbose) console.log();
builder.build(function(err, obj){
  if (err) utils.fatal(err.message);
  var js = '';
  var css = obj.css.trim();

  if (obj.js.trim()) {
    var name = 'string' == typeof standalone
      ? standalone
      : conf.name;

    if (standalone) js += ';(function(){\n';
    if (program.require) js += obj.require;
    js += obj.js;

    if (standalone) {
      var umd = [
        'if (typeof exports == "object") {',
        '  module.exports = require("' + conf.name + '");',
        '} else if (typeof define == "function" && define.amd) {',
        '  define(function(){ return require("' + conf.name + '"); });',
        '} else {',
        '  this["' + name + '"] = require("' + conf.name + '");',
        '}'
      ];

      js += umd.join('\n');
      js += '})();';
    }
  }

  // css
  if (css) fs.writeFile(cssPath, css);

  // js
  if (js) fs.writeFile(jsPath, js);

  if (!program.verbose) return;
  var duration = new Date - start;
  log('write', jsPath);
  log('write', cssPath);
  if (js) log('js', (js.length / 1024 | 0) + 'kb');
  if (css) log('css', (css.length / 1024 | 0) + 'kb');
  log('duration', duration + 'ms');
  console.log();
});
