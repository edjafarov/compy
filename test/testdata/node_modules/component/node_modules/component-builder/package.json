{
  "name": "component-builder",
  "version": "0.9.0",
  "description": "Component build tool",
  "keywords": [
    "component",
    "build"
  ],
  "author": {
    "name": "TJ Holowaychuk",
    "email": "tj@vision-media.caa"
  },
  "dependencies": {
    "component-require": "0.2.2",
    "batch": "0.2.1",
    "mkdirp": "0.3.4",
    "debug": "*",
    "better-assert": "~0.1.0",
    "cp": "~0.1.0",
    "string-to-js": "0.0.1"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*",
    "ejs": "~0.8.3",
    "styl": "0.2.2"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/component/builder.js.git"
  },
  "main": "index",
  "readme": "# builder.js\n\n  Component build tool. This is the library that `component(1)` utilizes\n  to perform component builds.\n\n## Installation\n\n    $ npm install component-builder\n\n## API\n\n### new Builder(dir)\n\n  Creates a new `Builder` for the given component's `dir`:\n\n```js\nvar Builder = require('component-builder');\nvar builder = new Builder('components/visionmedia-page');\n```\n\n### Builder#config\n\n  The component's component.json contents as an object.\n\n### Builder#addSourceURLs()\n\n  Add \"sourceURL\" support, wrapping the module functions\n  in `Function()` calls so that browsers may assign a\n  name to the scripts to aid in debugging.\n\n### Builder#addLookup(path)\n\n  Append the given dependency lookup `path`. This lookup `path` is\n  \"global\", thus it influences all dependency lookups.\n\n### Builder#development()\n\n  Include development dependencies.\n\n### Builder#addFile(type, filename, val)\n\n  Add a fabricated file of the given `type`, `filename`,\n  and contents `val`. For example if you were translating\n  a Stylus file to .css, or a Jade template to .js you may\n  do something like:\n\n```js\nbuilder.addFile('scripts', 'view.js', 'compiled view js');\n```\n\n### Builder#ignore(name, [type])\n\n  Ignore building `name`'s `type`, where `type` is \"scripts\" or \"styles\". When\n  no `type` is given both are ignored, this includes dependencies of `name` as well.\n\n```js\nbuilder.ignore('visionmedia-page')\n```\n\n### Builder#build(fn)\n\n  Perform the build and pass an object to `fn(err, obj)` containing\n  the `.css` and `.js` properties.\n\n### Builder#hook(name, fn)\n\n  A build \"hook\" is like an event that lets you manipulate the build in process. For\n  example you may use a hook to translate coffee script files to javascript automatically,\n  or compile a template to javascript so that it may be loaded with `require()`, or use\n  CSS pre-processors such as [rework](https://github.com/visionmedia/rework).\n  \n  Available hooks are:\n  - `before scripts`\n  - `before styles`\n\n## Examples\n\n### Basic build\n\n  The follow demonstrates the most basic build you can possible do using\n  this component builder implementation. A root component directory is\n  passed to `new Builder`, followed by a `.build()` call which then responds\n  with a `res` object containing the followign properties:\n\n  - `.require` the require implementation script\n  - `.js` compiled javascript\n  - `.css` compiled css\n\n```js\nvar builder = new Builder('lib/boot');\n\nbuilder.build(function(err, res){\n  if (err) throw err;\n  console.log(res.require + res.js);\n  console.log(res.css);\n});\n```\n\n### Lookup paths\n\n  In the previous example all the application's private components live in `./lib`,\n  thus if you want to specify dependencies without a leading `\"lib/\"` a lookup path\n  should be created with `.addLookup()`:\n\n```js\nvar builder = new Builder('lib/boot');\n\nbuilder.addLookup('lib');\n...\n```\n\n## License\n\n  MIT\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/component/builder.js/issues"
  },
  "_id": "component-builder@0.9.0",
  "dist": {
    "shasum": "d27bdd42327f2c3e3ce7a9323bdea6a06ae1e4f0"
  },
  "_from": "component-builder@0.9.0",
  "_resolved": "https://registry.npmjs.org/component-builder/-/component-builder-0.9.0.tgz"
}
