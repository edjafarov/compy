#!/usr/bin/env node
var program = require('commander');
var path = require('path');
var fs   = require('fs');
var root  = path.join(path.dirname(fs.realpathSync(__filename)), '..');

/*
#var complete = require('complete');

#complete.list = ['install','compile','build','server','test','watch'];

#complete({
#  program:"compy",
#  commands:{
#    server:function(words, prev, cur){
#      complete.output(cur, ['watch']);
#    },
#  },
#  options:{
#    '--help':{}
#  }
#})
#complete.init();
*/

var packageJson = require(root + '/package.json');

program
  .version(packageJson.version)
  .usage('<command> [options]')
  .option('-d, --dir <path>', 'project source path. Must contain package.json')
  .option('-o, --output <path>', 'output directory for build/compile')
  .option('-l, --library', 'generate standalone library')
  .option('-c, --component', 'generate component')
  .option('-a, --application', 'generate application [default]')
  .option('-v, --verbose', 'verbosity')
  .option('-f, --force', 'force installation of packages')
  .option('-s, --staticServer <path>', 'custom server that serves static with compy middleware')
  
program.on('--help', function(){
  console.log('  Commands:');
  console.log();
  console.log('    install [name ...]      install dependencies or component');
  console.log('    compile                 compile app (in dist folder by default)');
  console.log('    build                   build the app (compile and minify sources)');
  console.log('    server [watch]          run static server. If "watch" option enabled - watch changes, recompile and push livereload');
  console.log('    test                    run karma tests');
  console.log('    watch                   watch and rebuild assets on change');
  console.log();
  console.log();
}).parse(process.argv);

var cmd = program.args[0];
if (!cmd) {
  process.stdout.write(program.helpInformation());
  program.emit('--help');
  process.exit();
}

var options = {
  cwd : program.dir && path.resolve(program.dir) || process.cwd(),
  destination : program.output && path.resolve(program.output) || './dist',
  verbose : !!program.verbose,
  server : program.staticServer && path.resolve(program.staticServer),
  isStandaloneLib: program.library,
  isComponentjs: program.component,
  isApplication: program.application,
  force: !!program.force
}

if(!fs.existsSync(options.cwd + '/package.json')){
  console.log("Please, create package.json in current dir");
  console.log("package.json file with compy.main defined is required");
  return;
};

var projectJson = require(options.cwd + '/package.json');

var argv = process.argv.slice(0,2);
argv.push(program.args.map(function(a){return a.toString()}).join(":"));

if(!projectJson.compy){
  console.log("Please define main file for compy in package.json (compy.main)");
  console.log("package.json file with compy.main defined is required");
  return;
}

process.argv = argv;

require('grunt').cli({gruntfile: root + "/Gruntfile.js", 
    cmd:cmd,
    targetBase: options.cwd,
    base: options.cwd,
    destination: options.destination,
    verbose : options.verbose,
    server: options.server,
    force: options.force});
